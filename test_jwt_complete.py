#!/usr/bin/env python3
"""
Script completo para probar JWT en DESS
Ejecutar: python test_jwt_complete.py
"""

import requests
import json
import sys

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8000"
USERNAME = "admin"  # Cambia por tu usuario
PASSWORD = "admin"  # Cambia por tu contrase√±a

def print_separator(title):
    print("\n" + "="*50)
    print(f" {title}")
    print("="*50)

def test_jwt_endpoints():
    """Prueba completa de JWT"""
    
    print_separator("üîç VERIFICACI√ìN COMPLETA DE JWT - DESS")
    
    # 1. Verificar que los endpoints existen
    print("\n1Ô∏è‚É£ Verificando endpoints JWT...")
    
    jwt_urls = [
        f"{BASE_URL}/auth/login/",      # Token obtain
        f"{BASE_URL}/auth/refresh/",    # Token refresh  
        f"{BASE_URL}/auth/verify/",     # Token verify
    ]
    
    for url in jwt_urls:
        try:
            response = requests.post(url, json={})
            print(f"   ‚úÖ {url} - Status: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {url} - Error: {e}")
    
    # 2. Obtener token JWT
    print_separator("üîë OBTENIENDO TOKEN JWT")
    
    login_data = {
        "username": USERNAME,
        "password": PASSWORD
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login/", json=login_data)
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 200:
            tokens = response.json()
            access_token = tokens.get('access')
            refresh_token = tokens.get('refresh')
            
            if access_token:
                print("‚úÖ JWT ACCESS TOKEN OBTENIDO CORRECTAMENTE")
                print(f"   Access Token: {access_token[:50]}...")
                print(f"   Refresh Token: {refresh_token[:50]}..." if refresh_token else "   No refresh token")
                
                # 3. Verificar token
                print_separator("üîç VERIFICANDO TOKEN")
                
                verify_response = requests.post(
                    f"{BASE_URL}/auth/verify/",
                    json={"token": access_token}
                )
                
                print(f"Verify Status: {verify_response.status_code}")
                if verify_response.status_code == 200:
                    print("‚úÖ TOKEN V√ÅLIDO")
                else:
                    print("‚ùå TOKEN INV√ÅLIDO")
                    print(f"Response: {verify_response.text}")
                
                # 4. Probar endpoint protegido con JWT
                print_separator("üõ°Ô∏è PROBANDO ENDPOINT PROTEGIDO")
                
                headers = {"Authorization": f"Bearer {access_token}"}
                
                # Probar API de perfil
                try:
                    profile_response = requests.get(
                        f"{BASE_URL}/api/user/profile/",
                        headers=headers
                    )
                    print(f"Profile API Status: {profile_response.status_code}")
                    
                    if profile_response.status_code == 200:
                        print("‚úÖ ENDPOINT PROTEGIDO FUNCIONA CON JWT")
                        profile_data = profile_response.json()
                        print(f"   Usuario: {profile_data.get('username', 'N/A')}")
                        print(f"   Email: {profile_data.get('email', 'N/A')}")
                    else:
                        print("‚ùå ENDPOINT PROTEGIDO NO FUNCIONA")
                        print(f"Response: {profile_response.text}")
                        
                except Exception as e:
                    print(f"‚ùå Error al probar endpoint protegido: {e}")
                
                # 5. Probar refresh token
                if refresh_token:
                    print_separator("üîÑ PROBANDO REFRESH TOKEN")
                    
                    refresh_response = requests.post(
                        f"{BASE_URL}/auth/refresh/",
                        json={"refresh": refresh_token}
                    )
                    
                    print(f"Refresh Status: {refresh_response.status_code}")
                    if refresh_response.status_code == 200:
                        new_access = refresh_response.json().get('access')
                        print("‚úÖ REFRESH TOKEN FUNCIONA")
                        print(f"   Nuevo Access Token: {new_access[:50]}...")
                    else:
                        print("‚ùå REFRESH TOKEN NO FUNCIONA")
                        print(f"Response: {refresh_response.text}")
                
            else:
                print("‚ùå NO SE OBTUVO ACCESS TOKEN")
                print(f"Response completa: {response.text}")
        else:
            print(f"‚ùå ERROR AL HACER LOGIN")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 6. Verificar configuraci√≥n JWT en settings
    print_separator("‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN")
    
    print("Para verificar la configuraci√≥n JWT, revisa:")
    print("   ‚úì INSTALLED_APPS tiene 'rest_framework_simplejwt'")
    print("   ‚úì REST_FRAMEWORK tiene JWTAuthentication")
    print("   ‚úì SIMPLE_JWT settings est√°n configurados")
    print("   ‚úì URLs JWT est√°n incluidas en config/urls.py")
    
    print_separator("üìä RESUMEN")
    print("‚úÖ = Funcionando correctamente")
    print("‚ùå = Necesita revisi√≥n")
    print("\nSi ves ‚úÖ en todos los puntos, JWT est√° funcionando perfectamente!")

if __name__ == "__main__":
    print("üöÄ Iniciando prueba completa de JWT...")
    print(f"üì° Servidor: {BASE_URL}")
    print(f"üë§ Usuario: {USERNAME}")
    print("\n‚ö†Ô∏è  IMPORTANTE: Aseg√∫rate de que el servidor est√© corriendo y que tengas un usuario creado.")
    
    input("Presiona ENTER para continuar...")
    
    test_jwt_endpoints()
